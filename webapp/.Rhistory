}
if(length(learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"])!=0){
data$iwru[i] <- learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"]
} else {
data$iwru[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner"])!=0){
data$asl[i] <- learnersCount$freq[learnersCount$x == "Active social learner"]
} else {
data$asl[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"])!=0){
data$aslw[i] <- learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"]
} else {
data$aslw[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Reluctant active social learner"])!=0){
data$rasl[i] <- learnersCount$freq[learnersCount$x == "Reluctant active social learner"]
} else {
data$rasl[i] <- 0
}
#number of social learners
data$noSLearners[i] <- data$l[i] + data$r[i] + data$iwr[i] + data$iwru[i] + data$asl[i] + data$aslw[i] + data$rasl[i]
#computing ratios for learners
data$lRatio[i] <- data$l[i] / data$noSLearners[i]
data$rRatio[i] <- data$r[i] / data$noSLearners[i]
data$iwrRatio[i] <- data$iwr[i] / data$noSLearners[i]
data$iwruRatio[i] <- data$iwru[i] / data$noSLearners[i]
data$aslRatio[i] <- data$asl[i] / data$noSLearners[i]
data$aslwRatio[i] <- data$aslw[i] / data$noSLearners[i]
data$raslRatio[i] <- data$rasl[i] / data$noSLearners[i]
#computing the number of educators
data$noEducators <- length(intersect(educators$id, learners$learner_id))
print(data)
}
write.csv(data, file = "COURSES.csv")
#courseData <- coursesData[coursesData$course == "Introduction to Linked Data and the Semantic Web", ]
require(plyr)
require(RMySQL)
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_filters.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_analysis.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/courses.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/data_retrieval.R")
educators <-getAllTableData("TeamMembers")
coursesData <- getCourseMetaData()
print(coursesData)
courses <- unique(courseData$course)
noCourses <- length(courses)
data <- data.frame(course = courses, runs = numeric(noCourses), noWeeks = numeric(noCourses), noSteps = numeric(noCourses),
noEducators = numeric(noCourses), noEComments = numeric(noCourses),
hoursOfIntervention = numeric(noCourses), noSLearners = numeric(noCourses),  noLComments = numeric(noCourses),
ip = numeric(noCourses), lp = numeric(noCourses), fr = numeric(noCourses), fur = numeric(noCourses),
ir = numeric(noCourses), ipRatio = numeric(noCourses), lpRatio = numeric(noCourses), frRatio = numeric(noCourses),
furRatio = numeric(noCourses), irRatio = numeric(noCourses), l = numeric(noCourses),
r = numeric(noCourses), iwr = numeric(noCourses),  iwru = numeric(noCourses),
asl = numeric(noCourses), aslw = numeric(noCourses), rasl = numeric(noCourses),
lRatio = numeric(noCourses), rRatio = numeric(noCourses), iwrRatio = numeric(noCourses),
iwruRatio = numeric(noCourses), aslRatio = numeric(noCourses), aslwRatio = numeric(noCourses), raslRatio = numeric(noCourses))
print(courses)
for(i in 1:noCourses){
courseData <- coursesData[coursesData$course == courses[i], ]
data$course[i] <- courses[i]
data$runs[i] <- max(courseData$run)
data$noWeeks[i] <- max(courseData$no_of_weeks)
stepsData <- getTable("Activity", courses[i], 1)
stepsData$week_step <- getWeekStep(stepsData)
data$noSteps[i] <- length(unique(stepsData$week_step))
#number of educators comments
temp <- count(comments$nature[(comments$learner_id %in% educators$id)])
data$noEComments[i] <- sum(temp$freq)
# lst <- strsplit(courseData$social_learners, "-")
# noSocialLearners <- 0
# for(i in i:length(lst)){
#   noSocialLearners <- noSocialLearners + as.numeric(lst[[i]][i])
# }
# data$noSLearners[i] <- noSocialLearners
df <- getTable("Comments", courses[i],  "All")
comments <- getCommentsForClassification(df)
learners <- getLearnerClassificationData(comments)
#classification of comments
commentCount <- count(comments$nature[!(comments$learner_id %in% educators$id)])
if(length(commentCount$freq[commentCount$x == "initiating post"])!=0){
data$ip[i] <- commentCount$freq[commentCount$x == "initiating post"]
} else {
data$ip[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "lone post"])!=0){
data$lp[i] <- commentCount$freq[commentCount$x == "lone post"]
} else {
data$lp[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "first reply"])!=0){
data$fr[i] <- commentCount$freq[commentCount$x == "first reply"]
} else {
data$fr[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "further reply"])!=0){
data$fur[i] <- commentCount$freq[commentCount$x == "further reply"]
} else {
data$fur[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "initiator's reply"])!=0){
data$ir[i] <- commentCount$freq[commentCount$x == "initiator's reply"]
} else {
data$ir[i] <- 0
}
#number of learner comments
data$noLComments[i] <- data$lp[i] + data$ip[i] + data$fr[i] + data$fur[i] + data$ir[i]
#computing ratios for comments numbers
data$ipRatio[i] <- data$ip[i] / data$noLComments[i]
data$lpRatio[i] <- data$lp[i] / data$noLComments[i]
data$frRatio[i] <- data$fr[i] / data$noLComments[i]
data$furRatio[i] <- data$fur[i] / data$noLComments[i]
data$irRatio[i] <- data$ir[i]/ data$noLComments[i]
#classification of learners
learnersCount <- count(learners$type[!(learners$learner_id %in% educators$id)])
if(length(learnersCount$freq[learnersCount$x == "Loner"])!=0){
data$l[i] <- learnersCount$freq[learnersCount$x == "Loner"]
} else {
data$l[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Replier"])!=0){
data$r[i] <- learnersCount$freq[learnersCount$x == "Replier"]
} else {
data$r[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Initiator without replying"])!=0){
data$iwr[i] <- learnersCount$freq[learnersCount$x == "Initiator without replying"]
} else {
data$iwr[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"])!=0){
data$iwru[i] <- learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"]
} else {
data$iwru[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner"])!=0){
data$asl[i] <- learnersCount$freq[learnersCount$x == "Active social learner"]
} else {
data$asl[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"])!=0){
data$aslw[i] <- learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"]
} else {
data$aslw[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Reluctant active social learner"])!=0){
data$rasl[i] <- learnersCount$freq[learnersCount$x == "Reluctant active social learner"]
} else {
data$rasl[i] <- 0
}
#number of social learners
data$noSLearners[i] <- data$l[i] + data$r[i] + data$iwr[i] + data$iwru[i] + data$asl[i] + data$aslw[i] + data$rasl[i]
#computing ratios for learners
data$lRatio[i] <- data$l[i] / data$noSLearners[i]
data$rRatio[i] <- data$r[i] / data$noSLearners[i]
data$iwrRatio[i] <- data$iwr[i] / data$noSLearners[i]
data$iwruRatio[i] <- data$iwru[i] / data$noSLearners[i]
data$aslRatio[i] <- data$asl[i] / data$noSLearners[i]
data$aslwRatio[i] <- data$aslw[i] / data$noSLearners[i]
data$raslRatio[i] <- data$rasl[i] / data$noSLearners[i]
#computing the number of educators
data$noEducators <- length(intersect(educators$id, learners$learner_id))
print(data)
}
write.csv(data, file = "COURSES.csv")
#courseData <- coursesData[coursesData$course == "Introduction to Linked Data and the Semantic Web", ]
require(plyr)
require(RMySQL)
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_filters.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_analysis.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/courses.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/data_retrieval.R")
educators <-getAllTableData("TeamMembers")
coursesData <- getCourseMetaData()
print(coursesData)
courses <- unique(coursesData$course)
noCourses <- length(courses)
data <- data.frame(course = courses, runs = numeric(noCourses), noWeeks = numeric(noCourses), noSteps = numeric(noCourses),
noEducators = numeric(noCourses), noEComments = numeric(noCourses),
hoursOfIntervention = numeric(noCourses), noSLearners = numeric(noCourses),  noLComments = numeric(noCourses),
ip = numeric(noCourses), lp = numeric(noCourses), fr = numeric(noCourses), fur = numeric(noCourses),
ir = numeric(noCourses), ipRatio = numeric(noCourses), lpRatio = numeric(noCourses), frRatio = numeric(noCourses),
furRatio = numeric(noCourses), irRatio = numeric(noCourses), l = numeric(noCourses),
r = numeric(noCourses), iwr = numeric(noCourses),  iwru = numeric(noCourses),
asl = numeric(noCourses), aslw = numeric(noCourses), rasl = numeric(noCourses),
lRatio = numeric(noCourses), rRatio = numeric(noCourses), iwrRatio = numeric(noCourses),
iwruRatio = numeric(noCourses), aslRatio = numeric(noCourses), aslwRatio = numeric(noCourses), raslRatio = numeric(noCourses))
print(courses)
for(i in 1:noCourses){
courseData <- coursesData[coursesData$course == courses[i], ]
data$course[i] <- courses[i]
data$runs[i] <- max(courseData$run)
data$noWeeks[i] <- max(courseData$no_of_weeks)
stepsData <- getTable("Activity", courses[i], 1)
stepsData$week_step <- getWeekStep(stepsData)
data$noSteps[i] <- length(unique(stepsData$week_step))
#number of educators comments
temp <- count(comments$nature[(comments$learner_id %in% educators$id)])
data$noEComments[i] <- sum(temp$freq)
# lst <- strsplit(courseData$social_learners, "-")
# noSocialLearners <- 0
# for(i in i:length(lst)){
#   noSocialLearners <- noSocialLearners + as.numeric(lst[[i]][i])
# }
# data$noSLearners[i] <- noSocialLearners
df <- getTable("Comments", courses[i],  "All")
print(df)
comments <- getCommentsForClassification(df)
learners <- getLearnerClassificationData(comments)
#classification of comments
commentCount <- count(comments$nature[!(comments$learner_id %in% educators$id)])
if(length(commentCount$freq[commentCount$x == "initiating post"])!=0){
data$ip[i] <- commentCount$freq[commentCount$x == "initiating post"]
} else {
data$ip[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "lone post"])!=0){
data$lp[i] <- commentCount$freq[commentCount$x == "lone post"]
} else {
data$lp[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "first reply"])!=0){
data$fr[i] <- commentCount$freq[commentCount$x == "first reply"]
} else {
data$fr[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "further reply"])!=0){
data$fur[i] <- commentCount$freq[commentCount$x == "further reply"]
} else {
data$fur[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "initiator's reply"])!=0){
data$ir[i] <- commentCount$freq[commentCount$x == "initiator's reply"]
} else {
data$ir[i] <- 0
}
#number of learner comments
data$noLComments[i] <- data$lp[i] + data$ip[i] + data$fr[i] + data$fur[i] + data$ir[i]
#computing ratios for comments numbers
data$ipRatio[i] <- data$ip[i] / data$noLComments[i]
data$lpRatio[i] <- data$lp[i] / data$noLComments[i]
data$frRatio[i] <- data$fr[i] / data$noLComments[i]
data$furRatio[i] <- data$fur[i] / data$noLComments[i]
data$irRatio[i] <- data$ir[i]/ data$noLComments[i]
#classification of learners
learnersCount <- count(learners$type[!(learners$learner_id %in% educators$id)])
if(length(learnersCount$freq[learnersCount$x == "Loner"])!=0){
data$l[i] <- learnersCount$freq[learnersCount$x == "Loner"]
} else {
data$l[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Replier"])!=0){
data$r[i] <- learnersCount$freq[learnersCount$x == "Replier"]
} else {
data$r[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Initiator without replying"])!=0){
data$iwr[i] <- learnersCount$freq[learnersCount$x == "Initiator without replying"]
} else {
data$iwr[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"])!=0){
data$iwru[i] <- learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"]
} else {
data$iwru[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner"])!=0){
data$asl[i] <- learnersCount$freq[learnersCount$x == "Active social learner"]
} else {
data$asl[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"])!=0){
data$aslw[i] <- learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"]
} else {
data$aslw[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Reluctant active social learner"])!=0){
data$rasl[i] <- learnersCount$freq[learnersCount$x == "Reluctant active social learner"]
} else {
data$rasl[i] <- 0
}
#number of social learners
data$noSLearners[i] <- data$l[i] + data$r[i] + data$iwr[i] + data$iwru[i] + data$asl[i] + data$aslw[i] + data$rasl[i]
#computing ratios for learners
data$lRatio[i] <- data$l[i] / data$noSLearners[i]
data$rRatio[i] <- data$r[i] / data$noSLearners[i]
data$iwrRatio[i] <- data$iwr[i] / data$noSLearners[i]
data$iwruRatio[i] <- data$iwru[i] / data$noSLearners[i]
data$aslRatio[i] <- data$asl[i] / data$noSLearners[i]
data$aslwRatio[i] <- data$aslw[i] / data$noSLearners[i]
data$raslRatio[i] <- data$rasl[i] / data$noSLearners[i]
#computing the number of educators
data$noEducators <- length(intersect(educators$id, learners$learner_id))
print(data)
}
write.csv(data, file = "COURSES.csv")
#courseData <- coursesData[coursesData$course == "Introduction to Linked Data and the Semantic Web", ]
require(plyr)
require(RMySQL)
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_filters.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_analysis.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/courses.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/data_retrieval.R")
#script that computes the number of comments and learners (for each category) for all the courses for all runs at once
#gets the data for the educators
educators <-getAllTableData("TeamMembers")
#gets all the course names and number of courses
coursesData <- getCourseMetaData()
courses <- unique(coursesData$course)
noCourses <- length(courses)
#creates the data frame which will store all the information
data <- data.frame(course = courses, runs = numeric(noCourses), noWeeks = numeric(noCourses), noSteps = numeric(noCourses),
noEducators = numeric(noCourses), noEComments = numeric(noCourses),
hoursOfIntervention = numeric(noCourses), noSLearners = numeric(noCourses),  noLComments = numeric(noCourses),
ip = numeric(noCourses), lp = numeric(noCourses), fr = numeric(noCourses), fur = numeric(noCourses),
ir = numeric(noCourses), ipRatio = numeric(noCourses), lpRatio = numeric(noCourses), frRatio = numeric(noCourses),
furRatio = numeric(noCourses), irRatio = numeric(noCourses), l = numeric(noCourses),
r = numeric(noCourses), iwr = numeric(noCourses),  iwru = numeric(noCourses),
asl = numeric(noCourses), aslw = numeric(noCourses), rasl = numeric(noCourses),
lRatio = numeric(noCourses), rRatio = numeric(noCourses), iwrRatio = numeric(noCourses),
iwruRatio = numeric(noCourses), aslRatio = numeric(noCourses), aslwRatio = numeric(noCourses), raslRatio = numeric(noCourses))
#number of steps
stepsData <- getTable("Activity", "Agincourt 1415: Myth and Reality", 2)
if(nrow(stepsData) > 0){
stepsData$week_step <- getWeekStep(stepsData)
} else {
stepsData$week_step <- character(0)
}
print(length(unique(stepsData$week_step)))
#number of steps
stepsData <- getTable("Activity", "Exploring Our Oceans", 4)
if(nrow(stepsData) > 0){
stepsData$week_step <- getWeekStep(stepsData)
} else {
stepsData$week_step <- character(0)
}
print(length(unique(stepsData$week_step)))
#number of steps
stepsData <- getTable("Activity", "Understanding Language: Learning and Teaching", 5)
if(nrow(stepsData) > 0){
stepsData$week_step <- getWeekStep(stepsData)
} else {
stepsData$week_step <- character(0)
}
print(length(unique(stepsData$week_step)))
stepsData <- getTable("Activity", "Web Science: How the Web Is Changing the World", 4)
if(nrow(stepsData) > 0){
stepsData$week_step <- getWeekStep(stepsData)
} else {
stepsData$week_step <- character(0)
}
print(length(unique(stepsData$week_step)))
#
# #goes through each course and stores the specific information
# for(i in (1:noCourses)){
#
#   #course metadata specific for the current course
#   courseData <- coursesData[coursesData$course == courses[i], ]
#
#   #name of course
#   data$course[i] <- courses[i]
#
#   #number of runs
#   data$runs[i] <- max(courseData$run)
#
#   #number of weeks
#   data$noWeeks[i] <- max(courseData$no_of_weeks)
#
#
#
#   #classification of comments and learners
#   df <- getTable("Comments", courses[i],  "All")
#   if(nrow(df)==0){
#     next
#   }
#   comments <- getCommentsForClassification(df)
#   learners <- getLearnerClassificationData(comments)
#
#   # number of educators comments
#   temp <- count(comments$nature[(comments$learner_id %in% educators$id)])
#   data$noEComments[i] <- sum(temp$freq)
#
#   #counts the commetns in each category
#   commentCount <- count(comments$nature[!(comments$learner_id %in% educators$id)])
#
#   #updates the values in the data frame depending on the category
#   if(length(commentCount$freq[commentCount$x == "initiating post"])!=0){
#     data$ip[i] <- commentCount$freq[commentCount$x == "initiating post"]
#   } else {
#     data$ip[i] <- 0
#   }
#
#   if(length(commentCount$freq[commentCount$x == "lone post"])!=0){
#     data$lp[i] <- commentCount$freq[commentCount$x == "lone post"]
#   } else {
#     data$lp[i] <- 0
#   }
#
#   if(length(commentCount$freq[commentCount$x == "first reply"])!=0){
#     data$fr[i] <- commentCount$freq[commentCount$x == "first reply"]
#   } else {
#     data$fr[i] <- 0
#   }
#
#   if(length(commentCount$freq[commentCount$x == "further reply"])!=0){
#     data$fur[i] <- commentCount$freq[commentCount$x == "further reply"]
#   } else {
#     data$fur[i] <- 0
#   }
#
#   if(length(commentCount$freq[commentCount$x == "initiator's reply"])!=0){
#     data$ir[i] <- commentCount$freq[commentCount$x == "initiator's reply"]
#   } else {
#     data$ir[i] <- 0
#   }
#
#   #total number of learner comments
#   data$noLComments[i] <- data$lp[i] + data$ip[i] + data$fr[i] + data$fur[i] + data$ir[i]
#
#   #computing ratios for comments numbers
#   data$ipRatio[i] <- data$ip[i] / data$noLComments[i]
#   data$lpRatio[i] <- data$lp[i] / data$noLComments[i]
#   data$frRatio[i] <- data$fr[i] / data$noLComments[i]
#   data$furRatio[i] <- data$fur[i] / data$noLComments[i]
#   data$irRatio[i] <- data$ir[i]/ data$noLComments[i]
#
#   #counts the number of learners for each category
#   learnersCount <- count(learners$type[!(learners$learner_id %in% educators$id)])
#
#   #updates the data frame with the number of learners for each type
#   if(length(learnersCount$freq[learnersCount$x == "Loner"])!=0){
#     data$l[i] <- learnersCount$freq[learnersCount$x == "Loner"]
#   } else {
#     data$l[i] <- 0
#   }
#
#   if(length(learnersCount$freq[learnersCount$x == "Replier"])!=0){
#     data$r[i] <- learnersCount$freq[learnersCount$x == "Replier"]
#   } else {
#     data$r[i] <- 0
#   }
#
#   if(length(learnersCount$freq[learnersCount$x == "Initiator without replying"])!=0){
#     data$iwr[i] <- learnersCount$freq[learnersCount$x == "Initiator without replying"]
#   } else {
#     data$iwr[i] <- 0
#   }
#
#   if(length(learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"])!=0){
#     data$iwru[i] <- learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"]
#   } else {
#     data$iwru[i] <- 0
#   }
#
#   if(length(learnersCount$freq[learnersCount$x == "Active social learner"])!=0){
#     data$asl[i] <- learnersCount$freq[learnersCount$x == "Active social learner"]
#   } else {
#     data$asl[i] <- 0
#   }
#
#   if(length(learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"])!=0){
#     data$aslw[i] <- learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"]
#   } else {
#     data$aslw[i] <- 0
#   }
#
#   if(length(learnersCount$freq[learnersCount$x == "Reluctant active social learner"])!=0){
#     data$rasl[i] <- learnersCount$freq[learnersCount$x == "Reluctant active social learner"]
#   } else {
#     data$rasl[i] <- 0
#   }
#
#   #number of social learners
#   data$noSLearners[i] <- data$l[i] + data$r[i] + data$iwr[i] + data$iwru[i] + data$asl[i] + data$aslw[i] + data$rasl[i]
#
#   #computing ratios for learners
#   data$lRatio[i] <- data$l[i] / data$noSLearners[i]
#   data$rRatio[i] <- data$r[i] / data$noSLearners[i]
#   data$iwrRatio[i] <- data$iwr[i] / data$noSLearners[i]
#   data$iwruRatio[i] <- data$iwru[i] / data$noSLearners[i]
#   data$aslRatio[i] <- data$asl[i] / data$noSLearners[i]
#   data$aslwRatio[i] <- data$aslw[i] / data$noSLearners[i]
#   data$raslRatio[i] <- data$rasl[i] / data$noSLearners[i]
#
#   #computing the number of educators
#   data$noEducators[i] <- length(intersect(educators$id, learners$learner_id))
#
#   print(data[i, ])
#
#   #writes the csv file
#   write.csv(data, file = "COURSES.csv")
# }
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
