<<<<<<< HEAD
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
m1
## use character columns of names to get sensible sort order
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
(m2 <- merge(books, authors, by.x = "name", by.y = "surname"))
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
debugSource('~/mooc/mooc-dashboard/webapp/learner_analysis.R')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
View(learnersAgeData)
View(getWeekStep)
View(learnersAgeData)
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
Q
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
12
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
numeric(7)
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
cat("a", "b")
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
source("learner_filters.R")
source("courses.R")
source("data_retrieval.R")
source("server.R")
precourseDf <- read.csv("/home/erpatrascu/161228-pre-course-digital-accessibility-1.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/161228-post-course-digital-accessibility-1.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
commentsDf <- commentsDf[commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"]
commentsDf
commentsDf
commentsDf
source("learner_filters.R")
source("courses.R")
source("data_retrieval.R")
source("server.R")
precourseDf <- read.csv("/home/erpatrascu/161228-pre-course-digital-accessibility-1.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/161228-post-course-digital-accessibility-1.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
commentsDf <- commentsDf[commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"]
commentsDf
commentsDf <- getAllTableData("Comments")
source('~/mooc/mooc-dashboard/webapp/survey.R')
source("learner_filters.R")
source("courses.R")
source("data_retrieval.R")
source("server.R")
precourseDf <- read.csv("/home/erpatrascu/161228-pre-course-digital-accessibility-1.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/161228-post-course-digital-accessibility-1.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
commentsDf <- commentsDf[commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"]
commentsDf
source("learner_filters.R")
source("courses.R")
source("data_retrieval.R")
source("server.R")
precourseDf <- read.csv("/home/erpatrascu/161228-pre-course-digital-accessibility-1.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/161228-post-course-digital-accessibility-1.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
commentsDf <- commentsDf[commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"]
commentsDf
source("server.R")
source("learner_filters.R")
source("courses.R")
source("data_retrieval.R")
source("server.R")
shiny::runApp('mooc/mooc-dashboard/webapp')
source("learner_filters.R")
source("courses.R")
source("data_retrieval.R")
source("server.R")
precourseDf <- read.csv("/home/erpatrascu/161228-pre-course-digital-accessibility-1.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/161228-post-course-digital-accessibility-1.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
commentsDf <- commentsDf[commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"]
commentsDf
commentsDf <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society")
commentsDf
commentsDf <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society" & commentsDf$step == "1.2" & commentsDf$text!="")
commentsDf
precourseDf <- read.csv("/home/erpatrascu/161228-pre-course-digital-accessibility-1.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/161228-post-course-digital-accessibility-1.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
comments <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"
& commentsDf$step == "1.2" & commentsDf$text!="")[, c("author_id", "text")]
comments
comments$preCourseSurvey <- logic()
comments$postCourseSurvey <- logic()
comments
comments <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"
& commentsDf$step == "1.2" & commentsDf$text!="")[, c("author_id", "text")]
comments$preCourseSurvey <- logical(FALSE)
comments$postCourseSurvey <- logical(FALSE)
for(i in 1:(nrow(comments))){
comments$preCourseSurvey[which(comments$author_id) == precourseDf$partner_export_id]<-TRUE
comments$postCourseSurvey[which(comments$author_id) == postcourseDf$partner_export_id]<-TRUE
}
comments
head(comments)
source("learner_filters.R")
source("courses.R")
source("data_retrieval.R")
source("server.R")
precourseDf <- read.csv("/home/erpatrascu/161228-pre-course-digital-accessibility-1.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/161228-post-course-digital-accessibility-1.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
comments <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"
& commentsDf$step == "1.2" & commentsDf$text!="")[, c("author_id", "text")]
comments$preCourseSurvey <- logical(FALSE)
comments$postCourseSurvey <- logical(FALSE)
for(i in 1:(nrow(comments))){
comments$preCourseSurvey[which(comments$author_id) == precourseDf$partner_export_id]<-TRUE
comments$postCourseSurvey[which(comments$author_id) == postcourseDf$partner_export_id]<-TRUE
}
head(comments)
comments <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"
& commentsDf$step == "1.2" & commentsDf$text!="")[, c("author_id", "text")]
comments$preCourseSurvey <- logical()
comments$postCourseSurvey <- logical()
for(i in 1:(nrow(comments))){
comments[which(comments$author_id == precourseDf$partner_export_id)]$preCourseSurvey<-TRUE
comments[which(comments$author_id == postcourseDf$partner_export_id)]$postCourseSurvey<-TRUE
}
head(comments)
precourseDf <- read.csv("/home/erpatrascu/161228-pre-course-digital-accessibility-1.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/161228-post-course-digital-accessibility-1.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
comments <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"
& commentsDf$step == "1.2" & commentsDf$text!="")[, c("author_id", "text")]
comments$preCourseSurvey <- logical(nrow(comments))
comments$postCourseSurvey <- logical(nrow(comments))
for(i in 1:(nrow(comments))){
comments[which(comments$author_id == precourseDf$partner_export_id)]$preCourseSurvey<-TRUE
comments[which(comments$author_id == postcourseDf$partner_export_id)]$postCourseSurvey<-TRUE
}
head(comments)
head(comments[which(comments$preCourseSurvey == TRUE)])
head(comments[which(comments$postCourseSurvey == TRUE)])
comments <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"
& commentsDf$step == "1.2" & commentsDf$text!="")[, c("author_id", "text")]
comments$preCourseSurvey <- logical(nrow(comments))
comments$postCourseSurvey <- logical(nrow(comments))
for(i in 1:(nrow(comments))){
comments[which(comments$author_id == precourseDf$partner_export_id)]$preCourseSurvey<-TRUE
comments[which(comments$author_id == postcourseDf$partner_export_id)]$postCourseSurvey<-TRUE
}
head(comments[which(comments$postCourseSurvey == TRUE)])
head(comments[which(comments$postCourseSurvey == "TRUE")])
head(comments[whichcomments$author_id == postcourseDf$partner_export_id)])
head(comments[which(comments$author_id == postcourseDf$partner_export_id)])
precourseDf <- read.csv("/home/erpatrascu/161228-pre-course-digital-accessibility-1.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/161228-post-course-digital-accessibility-1.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
comments <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society"
& commentsDf$step == "1.2" & commentsDf$text!="")[, c("author_id", "text")]
comments$preCourseSurvey <- logical(nrow(comments))
comments$postCourseSurvey <- logical(nrow(comments))
#for(i in 1:(nrow(comments))){
comments[which(comments$author_id == precourseDf$partner_export_id)]$preCourseSurvey<-TRUE
comments[which(comments$author_id == postcourseDf$partner_export_id)]$postCourseSurvey<-TRUE
=======
} else {
stepsData$week_step <- character(0)
}
data$noSteps[i] <- length(unique(stepsData$week_step))
df <- getTable("Comments", courses[i],  "All")
if(nrow(df)==0){
next
}
comments <- getCommentsForClassification(df)
learners <- getLearnerClassificationData(comments)
#number of educators comments
# temp <- count(comments$nature[(comments$learner_id %in% educators$id)])
# data$noEComments[i] <- sum(temp$freq)
#
# #classification of comments
# commentCount <- count(comments$nature[!(comments$learner_id %in% educators$id)])
#
# if(length(commentCount$freq[commentCount$x == "initiating post"])!=0){
#   data$ip[i] <- commentCount$freq[commentCount$x == "initiating post"]
# } else {
#   data$ip[i] <- 0
# }
#
# if(length(commentCount$freq[commentCount$x == "lone post"])!=0){
#   data$lp[i] <- commentCount$freq[commentCount$x == "lone post"]
# } else {
#   data$lp[i] <- 0
# }
#
# if(length(commentCount$freq[commentCount$x == "first reply"])!=0){
#   data$fr[i] <- commentCount$freq[commentCount$x == "first reply"]
# } else {
#   data$fr[i] <- 0
# }
#
# if(length(commentCount$freq[commentCount$x == "further reply"])!=0){
#   data$fur[i] <- commentCount$freq[commentCount$x == "further reply"]
# } else {
#   data$fur[i] <- 0
# }
#
# if(length(commentCount$freq[commentCount$x == "initiator's reply"])!=0){
#   data$ir[i] <- commentCount$freq[commentCount$x == "initiator's reply"]
# } else {
#   data$ir[i] <- 0
# }
>>>>>>> fb3e28981f761375d6c652c59dc1c4c115769a24
#
# #number of learner comments
# data$noLComments[i] <- data$lp[i] + data$ip[i] + data$fr[i] + data$fur[i] + data$ir[i]
#
# #computing ratios for comments numbers
# data$ipRatio[i] <- data$ip[i] / data$noLComments[i]
# data$lpRatio[i] <- data$lp[i] / data$noLComments[i]
# data$frRatio[i] <- data$fr[i] / data$noLComments[i]
# data$furRatio[i] <- data$fur[i] / data$noLComments[i]
# data$irRatio[i] <- data$ir[i]/ data$noLComments[i]
#
# #classification of learners
# learnersCount <- count(learners$type[!(learners$learner_id %in% educators$id)])
#
# if(length(learnersCount$freq[learnersCount$x == "Loner"])!=0){
#   data$l[i] <- learnersCount$freq[learnersCount$x == "Loner"]
# } else {
#   data$l[i] <- 0
# }
#
# if(length(learnersCount$freq[learnersCount$x == "Replier"])!=0){
#   data$r[i] <- learnersCount$freq[learnersCount$x == "Replier"]
# } else {
#   data$r[i] <- 0
# }
#
# if(length(learnersCount$freq[learnersCount$x == "Initiator without replying"])!=0){
#   data$iwr[i] <- learnersCount$freq[learnersCount$x == "Initiator without replying"]
# } else {
#   data$iwr[i] <- 0
# }
#
# if(length(learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"])!=0){
#   data$iwru[i] <- learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"]
# } else {
#   data$iwru[i] <- 0
# }
#
# if(length(learnersCount$freq[learnersCount$x == "Active social learner"])!=0){
#   data$asl[i] <- learnersCount$freq[learnersCount$x == "Active social learner"]
# } else {
#   data$asl[i] <- 0
# }
#
<<<<<<< HEAD
#data <- merge(precourseDf, postcourseDf, by.x = "RespondentID", by.y = "RespondentID")
#data
head(comments[comments$preCourseSurvey==TRUE, ])
source("learner_filters.R")
source("learner_filters.R")
source('~/mooc/mooc-dashboard/webapp/survey.R')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
comments <- comments[which(comments$step == "1.2"), ][ ,c("author_id", "text")]
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
require(rCharts)
require(rCharts)
h1 <-rCharts::Highcharts$new()
h1$title(text = "CORRELATION PLOT", align = "center")
h1$xAxis(title = list(text = input$variable1))
h1$yAxis(title = list(text = input$variable2))
plot_data_orig = list(
list(x = 0, y = 0.2),
list(x = 1, y = 0.9),
list(x = 2, y = 2.1)
)
plot_data_fitted = list(
list(x = 0, y = 0),
list(x = 1, y = 1),
list(x = 2, y = 2)
)
h1$series(name = "Values",
type = "scatter",
data = plot_data_orig)
h1$series(name = "regression",
type = "line",
data = plot_data_fitted)
h1
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
=======
# if(length(learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"])!=0){
#   data$aslw[i] <- learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"]
# } else {
#   data$aslw[i] <- 0
# }
#
# if(length(learnersCount$freq[learnersCount$x == "Reluctant active social learner"])!=0){
#   data$rasl[i] <- learnersCount$freq[learnersCount$x == "Reluctant active social learner"]
# } else {
#   data$rasl[i] <- 0
# }
#
# #number of social learners
# data$noSLearners[i] <- data$l[i] + data$r[i] + data$iwr[i] + data$iwru[i] + data$asl[i] + data$aslw[i] + data$rasl[i]
#
# #computing ratios for learners
# data$lRatio[i] <- data$l[i] / data$noSLearners[i]
# data$rRatio[i] <- data$r[i] / data$noSLearners[i]
# data$iwrRatio[i] <- data$iwr[i] / data$noSLearners[i]
# data$iwruRatio[i] <- data$iwru[i] / data$noSLearners[i]
# data$aslRatio[i] <- data$asl[i] / data$noSLearners[i]
# data$aslwRatio[i] <- data$aslw[i] / data$noSLearners[i]
# data$raslRatio[i] <- data$rasl[i] / data$noSLearners[i]
#
#computing the number of educators
data$noEducators[i] <- length(intersect(educators$id, learners$learner_id))
print(data[i, ])
write.csv(data, file = "COURSES.csv")
}
require(plyr)
require(RMySQL)
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_filters.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_analysis.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/courses.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/data_retrieval.R")
educators <-getAllTableData("TeamMembers")
coursesData <- getCourseMetaData()
print(coursesData)
courses <- unique(coursesData$course)
noCourses <- length(courses)
data <- data.frame(course = courses, runs = numeric(noCourses), noWeeks = numeric(noCourses), noSteps = numeric(noCourses),
noEducators = numeric(noCourses), noEComments = numeric(noCourses),
hoursOfIntervention = numeric(noCourses), noSLearners = numeric(noCourses),  noLComments = numeric(noCourses),
ip = numeric(noCourses), lp = numeric(noCourses), fr = numeric(noCourses), fur = numeric(noCourses),
ir = numeric(noCourses), ipRatio = numeric(noCourses), lpRatio = numeric(noCourses), frRatio = numeric(noCourses),
furRatio = numeric(noCourses), irRatio = numeric(noCourses), l = numeric(noCourses),
r = numeric(noCourses), iwr = numeric(noCourses),  iwru = numeric(noCourses),
asl = numeric(noCourses), aslw = numeric(noCourses), rasl = numeric(noCourses),
lRatio = numeric(noCourses), rRatio = numeric(noCourses), iwrRatio = numeric(noCourses),
iwruRatio = numeric(noCourses), aslRatio = numeric(noCourses), aslwRatio = numeric(noCourses), raslRatio = numeric(noCourses))
print(courses)
print(noCourses)
for(i in (18:19)){
courseData <- coursesData[coursesData$course == courses[i], ]
data$course[i] <- courses[i]
data$runs[i] <- max(courseData$run)
data$noWeeks[i] <- max(courseData$no_of_weeks)
stepsData <- getTable("Activity", courses[i], 1)
if(nrow(stepsData) > 0){
stepsData$week_step <- getWeekStep(stepsData)
} else {
stepsData$week_step <- character(0)
}
data$noSteps[i] <- length(unique(stepsData$week_step))
df <- getTable("Comments", courses[i],  "All")
if(nrow(df)==0){
next
}
comments <- getCommentsForClassification(df)
learners <- getLearnerClassificationData(comments)
# number of educators comments
temp <- count(comments$nature[(comments$learner_id %in% educators$id)])
data$noEComments[i] <- sum(temp$freq)
#classification of comments
commentCount <- count(comments$nature[!(comments$learner_id %in% educators$id)])
if(length(commentCount$freq[commentCount$x == "initiating post"])!=0){
data$ip[i] <- commentCount$freq[commentCount$x == "initiating post"]
} else {
data$ip[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "lone post"])!=0){
data$lp[i] <- commentCount$freq[commentCount$x == "lone post"]
} else {
data$lp[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "first reply"])!=0){
data$fr[i] <- commentCount$freq[commentCount$x == "first reply"]
} else {
data$fr[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "further reply"])!=0){
data$fur[i] <- commentCount$freq[commentCount$x == "further reply"]
} else {
data$fur[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "initiator's reply"])!=0){
data$ir[i] <- commentCount$freq[commentCount$x == "initiator's reply"]
} else {
data$ir[i] <- 0
}
#number of learner comments
data$noLComments[i] <- data$lp[i] + data$ip[i] + data$fr[i] + data$fur[i] + data$ir[i]
#computing ratios for comments numbers
data$ipRatio[i] <- data$ip[i] / data$noLComments[i]
data$lpRatio[i] <- data$lp[i] / data$noLComments[i]
data$frRatio[i] <- data$fr[i] / data$noLComments[i]
data$furRatio[i] <- data$fur[i] / data$noLComments[i]
data$irRatio[i] <- data$ir[i]/ data$noLComments[i]
#classification of learners
learnersCount <- count(learners$type[!(learners$learner_id %in% educators$id)])
if(length(learnersCount$freq[learnersCount$x == "Loner"])!=0){
data$l[i] <- learnersCount$freq[learnersCount$x == "Loner"]
} else {
data$l[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Replier"])!=0){
data$r[i] <- learnersCount$freq[learnersCount$x == "Replier"]
} else {
data$r[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Initiator without replying"])!=0){
data$iwr[i] <- learnersCount$freq[learnersCount$x == "Initiator without replying"]
} else {
data$iwr[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"])!=0){
data$iwru[i] <- learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"]
} else {
data$iwru[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner"])!=0){
data$asl[i] <- learnersCount$freq[learnersCount$x == "Active social learner"]
} else {
data$asl[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"])!=0){
data$aslw[i] <- learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"]
} else {
data$aslw[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Reluctant active social learner"])!=0){
data$rasl[i] <- learnersCount$freq[learnersCount$x == "Reluctant active social learner"]
} else {
data$rasl[i] <- 0
}
#number of social learners
data$noSLearners[i] <- data$l[i] + data$r[i] + data$iwr[i] + data$iwru[i] + data$asl[i] + data$aslw[i] + data$rasl[i]
#computing ratios for learners
data$lRatio[i] <- data$l[i] / data$noSLearners[i]
data$rRatio[i] <- data$r[i] / data$noSLearners[i]
data$iwrRatio[i] <- data$iwr[i] / data$noSLearners[i]
data$iwruRatio[i] <- data$iwru[i] / data$noSLearners[i]
data$aslRatio[i] <- data$asl[i] / data$noSLearners[i]
data$aslwRatio[i] <- data$aslw[i] / data$noSLearners[i]
data$raslRatio[i] <- data$rasl[i] / data$noSLearners[i]
computing the number of educators
data$noEducators[i] <- length(intersect(educators$id, learners$learner_id))
print(data[i, ])
write.csv(data, file = "COURSES.csv")
}
require(plyr)
require(RMySQL)
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_filters.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_analysis.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/courses.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/data_retrieval.R")
educators <-getAllTableData("TeamMembers")
coursesData <- getCourseMetaData()
print(coursesData)
courses <- unique(coursesData$course)
noCourses <- length(courses)
data <- data.frame(course = courses, runs = numeric(noCourses), noWeeks = numeric(noCourses), noSteps = numeric(noCourses),
noEducators = numeric(noCourses), noEComments = numeric(noCourses),
hoursOfIntervention = numeric(noCourses), noSLearners = numeric(noCourses),  noLComments = numeric(noCourses),
ip = numeric(noCourses), lp = numeric(noCourses), fr = numeric(noCourses), fur = numeric(noCourses),
ir = numeric(noCourses), ipRatio = numeric(noCourses), lpRatio = numeric(noCourses), frRatio = numeric(noCourses),
furRatio = numeric(noCourses), irRatio = numeric(noCourses), l = numeric(noCourses),
r = numeric(noCourses), iwr = numeric(noCourses),  iwru = numeric(noCourses),
asl = numeric(noCourses), aslw = numeric(noCourses), rasl = numeric(noCourses),
lRatio = numeric(noCourses), rRatio = numeric(noCourses), iwrRatio = numeric(noCourses),
iwruRatio = numeric(noCourses), aslRatio = numeric(noCourses), aslwRatio = numeric(noCourses), raslRatio = numeric(noCourses))
print(courses)
print(noCourses)
for(i in (18:19)){
courseData <- coursesData[coursesData$course == courses[i], ]
data$course[i] <- courses[i]
data$runs[i] <- max(courseData$run)
data$noWeeks[i] <- max(courseData$no_of_weeks)
stepsData <- getTable("Activity", courses[i], 1)
if(nrow(stepsData) > 0){
stepsData$week_step <- getWeekStep(stepsData)
} else {
stepsData$week_step <- character(0)
}
data$noSteps[i] <- length(unique(stepsData$week_step))
df <- getTable("Comments", courses[i],  "All")
if(nrow(df)==0){
next
}
comments <- getCommentsForClassification(df)
learners <- getLearnerClassificationData(comments)
# number of educators comments
temp <- count(comments$nature[(comments$learner_id %in% educators$id)])
data$noEComments[i] <- sum(temp$freq)
#classification of comments
commentCount <- count(comments$nature[!(comments$learner_id %in% educators$id)])
if(length(commentCount$freq[commentCount$x == "initiating post"])!=0){
data$ip[i] <- commentCount$freq[commentCount$x == "initiating post"]
} else {
data$ip[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "lone post"])!=0){
data$lp[i] <- commentCount$freq[commentCount$x == "lone post"]
} else {
data$lp[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "first reply"])!=0){
data$fr[i] <- commentCount$freq[commentCount$x == "first reply"]
} else {
data$fr[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "further reply"])!=0){
data$fur[i] <- commentCount$freq[commentCount$x == "further reply"]
} else {
data$fur[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "initiator's reply"])!=0){
data$ir[i] <- commentCount$freq[commentCount$x == "initiator's reply"]
} else {
data$ir[i] <- 0
}
#number of learner comments
data$noLComments[i] <- data$lp[i] + data$ip[i] + data$fr[i] + data$fur[i] + data$ir[i]
#computing ratios for comments numbers
data$ipRatio[i] <- data$ip[i] / data$noLComments[i]
data$lpRatio[i] <- data$lp[i] / data$noLComments[i]
data$frRatio[i] <- data$fr[i] / data$noLComments[i]
data$furRatio[i] <- data$fur[i] / data$noLComments[i]
data$irRatio[i] <- data$ir[i]/ data$noLComments[i]
#classification of learners
learnersCount <- count(learners$type[!(learners$learner_id %in% educators$id)])
if(length(learnersCount$freq[learnersCount$x == "Loner"])!=0){
data$l[i] <- learnersCount$freq[learnersCount$x == "Loner"]
} else {
data$l[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Replier"])!=0){
data$r[i] <- learnersCount$freq[learnersCount$x == "Replier"]
} else {
data$r[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Initiator without replying"])!=0){
data$iwr[i] <- learnersCount$freq[learnersCount$x == "Initiator without replying"]
} else {
data$iwr[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"])!=0){
data$iwru[i] <- learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"]
} else {
data$iwru[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner"])!=0){
data$asl[i] <- learnersCount$freq[learnersCount$x == "Active social learner"]
} else {
data$asl[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"])!=0){
data$aslw[i] <- learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"]
} else {
data$aslw[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Reluctant active social learner"])!=0){
data$rasl[i] <- learnersCount$freq[learnersCount$x == "Reluctant active social learner"]
} else {
data$rasl[i] <- 0
}
#number of social learners
data$noSLearners[i] <- data$l[i] + data$r[i] + data$iwr[i] + data$iwru[i] + data$asl[i] + data$aslw[i] + data$rasl[i]
#computing ratios for learners
data$lRatio[i] <- data$l[i] / data$noSLearners[i]
data$rRatio[i] <- data$r[i] / data$noSLearners[i]
data$iwrRatio[i] <- data$iwr[i] / data$noSLearners[i]
data$iwruRatio[i] <- data$iwru[i] / data$noSLearners[i]
data$aslRatio[i] <- data$asl[i] / data$noSLearners[i]
data$aslwRatio[i] <- data$aslw[i] / data$noSLearners[i]
data$raslRatio[i] <- data$rasl[i] / data$noSLearners[i]
#computing the number of educators
data$noEducators[i] <- length(intersect(educators$id, learners$learner_id))
print(data[i, ])
write.csv(data, file = "COURSES.csv")
}
require(plyr)
require(RMySQL)
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_filters.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/learner_analysis.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/courses.R")
source("/home/erpatrascu/mooc/mooc-dashboard/webapp/data_retrieval.R")
educators <-getAllTableData("TeamMembers")
coursesData <- getCourseMetaData()
print(coursesData)
courses <- unique(coursesData$course)
noCourses <- length(courses)
data <- data.frame(course = courses, runs = numeric(noCourses), noWeeks = numeric(noCourses), noSteps = numeric(noCourses),
noEducators = numeric(noCourses), noEComments = numeric(noCourses),
hoursOfIntervention = numeric(noCourses), noSLearners = numeric(noCourses),  noLComments = numeric(noCourses),
ip = numeric(noCourses), lp = numeric(noCourses), fr = numeric(noCourses), fur = numeric(noCourses),
ir = numeric(noCourses), ipRatio = numeric(noCourses), lpRatio = numeric(noCourses), frRatio = numeric(noCourses),
furRatio = numeric(noCourses), irRatio = numeric(noCourses), l = numeric(noCourses),
r = numeric(noCourses), iwr = numeric(noCourses),  iwru = numeric(noCourses),
asl = numeric(noCourses), aslw = numeric(noCourses), rasl = numeric(noCourses),
lRatio = numeric(noCourses), rRatio = numeric(noCourses), iwrRatio = numeric(noCourses),
iwruRatio = numeric(noCourses), aslRatio = numeric(noCourses), aslwRatio = numeric(noCourses), raslRatio = numeric(noCourses))
print(courses)
print(noCourses)
for(i in (17:17)){
courseData <- coursesData[coursesData$course == courses[i], ]
data$course[i] <- courses[i]
data$runs[i] <- max(courseData$run)
data$noWeeks[i] <- max(courseData$no_of_weeks)
stepsData <- getTable("Activity", courses[i], 1)
if(nrow(stepsData) > 0){
stepsData$week_step <- getWeekStep(stepsData)
} else {
stepsData$week_step <- character(0)
}
data$noSteps[i] <- length(unique(stepsData$week_step))
df <- getTable("Comments", courses[i],  "All")
if(nrow(df)==0){
next
}
comments <- getCommentsForClassification(df)
learners <- getLearnerClassificationData(comments)
# number of educators comments
temp <- count(comments$nature[(comments$learner_id %in% educators$id)])
data$noEComments[i] <- sum(temp$freq)
#classification of comments
commentCount <- count(comments$nature[!(comments$learner_id %in% educators$id)])
if(length(commentCount$freq[commentCount$x == "initiating post"])!=0){
data$ip[i] <- commentCount$freq[commentCount$x == "initiating post"]
} else {
data$ip[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "lone post"])!=0){
data$lp[i] <- commentCount$freq[commentCount$x == "lone post"]
} else {
data$lp[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "first reply"])!=0){
data$fr[i] <- commentCount$freq[commentCount$x == "first reply"]
} else {
data$fr[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "further reply"])!=0){
data$fur[i] <- commentCount$freq[commentCount$x == "further reply"]
} else {
data$fur[i] <- 0
}
if(length(commentCount$freq[commentCount$x == "initiator's reply"])!=0){
data$ir[i] <- commentCount$freq[commentCount$x == "initiator's reply"]
} else {
data$ir[i] <- 0
}
#number of learner comments
data$noLComments[i] <- data$lp[i] + data$ip[i] + data$fr[i] + data$fur[i] + data$ir[i]
#computing ratios for comments numbers
data$ipRatio[i] <- data$ip[i] / data$noLComments[i]
data$lpRatio[i] <- data$lp[i] / data$noLComments[i]
data$frRatio[i] <- data$fr[i] / data$noLComments[i]
data$furRatio[i] <- data$fur[i] / data$noLComments[i]
data$irRatio[i] <- data$ir[i]/ data$noLComments[i]
#classification of learners
learnersCount <- count(learners$type[!(learners$learner_id %in% educators$id)])
if(length(learnersCount$freq[learnersCount$x == "Loner"])!=0){
data$l[i] <- learnersCount$freq[learnersCount$x == "Loner"]
} else {
data$l[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Replier"])!=0){
data$r[i] <- learnersCount$freq[learnersCount$x == "Replier"]
} else {
data$r[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Initiator without replying"])!=0){
data$iwr[i] <- learnersCount$freq[learnersCount$x == "Initiator without replying"]
} else {
data$iwr[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"])!=0){
data$iwru[i] <- learnersCount$freq[learnersCount$x == "Initiator who responds under their own initiating posts"]
} else {
data$iwru[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner"])!=0){
data$asl[i] <- learnersCount$freq[learnersCount$x == "Active social learner"]
} else {
data$asl[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"])!=0){
data$aslw[i] <- learnersCount$freq[learnersCount$x == "Active social learner without repeated turn-taking"]
} else {
data$aslw[i] <- 0
}
if(length(learnersCount$freq[learnersCount$x == "Reluctant active social learner"])!=0){
data$rasl[i] <- learnersCount$freq[learnersCount$x == "Reluctant active social learner"]
} else {
data$rasl[i] <- 0
}
#number of social learners
data$noSLearners[i] <- data$l[i] + data$r[i] + data$iwr[i] + data$iwru[i] + data$asl[i] + data$aslw[i] + data$rasl[i]
#computing ratios for learners
data$lRatio[i] <- data$l[i] / data$noSLearners[i]
data$rRatio[i] <- data$r[i] / data$noSLearners[i]
data$iwrRatio[i] <- data$iwr[i] / data$noSLearners[i]
data$iwruRatio[i] <- data$iwru[i] / data$noSLearners[i]
data$aslRatio[i] <- data$asl[i] / data$noSLearners[i]
data$aslwRatio[i] <- data$aslw[i] / data$noSLearners[i]
data$raslRatio[i] <- data$rasl[i] / data$noSLearners[i]
#computing the number of educators
data$noEducators[i] <- length(intersect(educators$id, learners$learner_id))
print(data[i, ])
write.csv(data, file = "COURSES.csv")
}
>>>>>>> fb3e28981f761375d6c652c59dc1c4c115769a24
