data <- data.frame(levels = c("<18","18-25","26-35","36-45","46-55","56-65",">65"))
data$levels <- as.character(data$levels)
data
data$levels
data <- data.frame(levels = c("<18","18-25","26-35","36-45","46-55","56-65",">65"), numbers = c (1, 2, 3, 4, 5, 6, 7))
data
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
return(courses)
getListOfCourses <- function() {
outputPath <- file.path(getwd(),"../data",institution)
courses <- list.dirs(path = outputPath, full.names = FALSE, recursive = FALSE)
courses <- courses[which(courses != "Courses Data")]
return(courses)
}
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
## use character columns of names to get sensible sort order
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
m1
## use character columns of names to get sensible sort order
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
(m2 <- merge(books, authors, by.x = "name", by.y = "surname"))
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
debugSource('~/mooc/mooc-dashboard/webapp/learner_analysis.R')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
View(learnersAgeData)
View(getWeekStep)
View(learnersAgeData)
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
Q
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
12
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
numeric(7)
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
cat("a", "b")
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
shiny::runApp('mooc/mooc-dashboard/webapp')
runApp('mooc/mooc-dashboard/webapp')
source("learner_filters.R")
source("courses.R")
source("data_retrieval.R")
source("server.R")
precourseDf <- read.csv("/home/erpatrascu/pre-course responses.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/post-course responses.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
comments <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society" & commentsDf$run == 2
& commentsDf$step == "1.2" & commentsDf$text!="")[, c("author_id", "text")]
comments$preCourseSurvey <- logical(nrow(comments))
comments$postCourseSurvey <- logical(nrow(comments))
#for(i in 1:(nrow(comments))){
comments$preCourseSurvey[comments$author_id %in% precourseDf$partner_export_id]<-TRUE
comments$postCourseSurvey[comments$author_id %in% postcourseDf$partner_export_id]<-TRUE
#
comments
#data <- merge(precourseDf, postcourseDf, by.x = "RespondentID", by.y = "RespondentID")
#data
head(comments[comments$preCourseSurvey==TRUE, ])
comments
precourseDf <- read.csv("/home/erpatrascu/pre-course responses.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/post-course responses.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
comments <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society" & commentsDf$run == 2
& commentsDf$step == "1.2" & commentsDf$text!="")[, c("author_id", "text")]
comments
source("learner_filters.R")
source("courses.R")
source("data_retrieval.R")
source("server.R")
precourseDf <- read.csv("/home/erpatrascu/pre-course responses.csv", header = TRUE)
postcourseDf <- read.csv("/home/erpatrascu/post-course responses.csv", header = TRUE)
commentsDf <- getAllTableData("Comments")
comments <- subset(commentsDf, commentsDf$course == "Digital Accessibility: Enabling Participation in the Information Society" & commentsDf$course_run == 2
& commentsDf$step == "1.2" & commentsDf$text!="")[, c("author_id", "text")]
comments$preCourseSurvey <- logical(nrow(comments))
comments$postCourseSurvey <- logical(nrow(comments))
#for(i in 1:(nrow(comments))){
comments$preCourseSurvey[comments$author_id %in% precourseDf$partner_export_id]<-TRUE
comments$postCourseSurvey[comments$author_id %in% postcourseDf$partner_export_id]<-TRUE
#
comments
#data <- merge(precourseDf, postcourseDf, by.x = "RespondentID", by.y = "RespondentID")
#data
head(comments[comments$preCourseSurvey==TRUE, ])
data <- merge(precourseDf, postcourseDf, by.x = "RespondentID", by.y = "RespondentID")
data
precourseDf$RespondentID %in% postcourseDf$RespondentID
data <- merge(precourseDf, postcourseDf)
data
data <- merge(precourseDf, postcourseDf, by.x = "RespondentID")
data <- merge(precourseDf, postcourseDf, by = intersect(names(preCourseSurvey), names(postCourseSurvey)), by.x = by, by.y = by)
data <- merge(precourseDf, postcourseDf, by.x = "RespondentID", by.y = "RespondentID")
data
runApp()
